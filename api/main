from fastapi import FastAPI, Request
from fastapi.responses import RedirectResponse, JSONResponse
from authlib.integrations.starlette_client import OAuth
from starlette.middleware.sessions import SessionMiddleware
import os
from dotenv import load_dotenv

load_dotenv()

app = FastAPI()

# Add session support
app.add_middleware(SessionMiddleware, secret_key=os.getenv("SESSION_SECRET"))

# OAuth Setup
oauth = OAuth()
oauth.register(
    name='google',
    client_id=os.getenv("GOOGLE_CLIENT_ID"),
    client_secret=os.getenv("GOOGLE_CLIENT_SECRET"),
    server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',
    client_kwargs={
        'scope': 'openid email profile'
    }
)

@app.get('/')
async def homepage(request: Request):
    user = request.session.get('user')
    if user:
        return JSONResponse({'message': 'You are logged in', 'email': user['email']})
    return RedirectResponse(url='/login')

@app.get('/login')
async def login(request: Request):
    redirect_uri = request.url_for('auth_callback')
    return await oauth.google.authorize_redirect(request, redirect_uri)

@app.get('/auth/callback')
async def auth_callback(request: Request):
    token = await oauth.google.authorize_access_token(request)
    user = await oauth.google.parse_id_token(request, token)
    request.session['user'] = dict(user)
    request.session['id_token'] = token['id_token']
    return RedirectResponse(url='/id_token')

@app.get('/id_token')
async def get_id_token(request: Request):
    id_token = request.session.get('id_token')
    if not id_token:
        return RedirectResponse(url='/login')
    return JSONResponse({"id_token": id_token})
